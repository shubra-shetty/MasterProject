package com.example.finalproject_try1;
import com.google.appengine.api.datastore.GeoPt;
import com.google.appengine.api.datastore.Key;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

	/**
	 * Place entity.
	 *
	*/

	@Entity
	public class MyCalculations {
	  @Id
	  @GeneratedValue(strategy = GenerationType.IDENTITY)
	  private Key key;

	  private String placeId;

	  private String name;

	  private String address;

	  private GeoPt location;
	  
	  private double midpt_lat;
	  private double midpt_lon;
	  
	  public Key getKey() {
	    return key;
	  }

	  public String getPlaceId() {
	    return placeId;
	  }

	  public void setplaceID(String placeId) {
	    this.placeId = placeId;
	  }

	  public String getName() {
	    return name;
	  }

	  public void setName(String name) {
	    this.name = name;
	  }

	  public String getAddress() {
	    return address;
	  }

	  public void setAddress(String address) {
	    this.address = address;
	  }

	  public GeoPt getLocation() {
	    return location;
	  }

	  public void setLocation(GeoPt location) {
	    this.location = location;
	  }
	  
	  public double getMidpointLat() {
		  return midpt_lat;
	  }
	  public double getMidpointLon() {
		  return midpt_lon;
	  }
	/*  public void setMidpoint(double lat, double lon) {
		  this.midpt_lat = lat;
		  this.midpt_lon = lon;
	  }*/
	  public void setMidpointLat(double lat) {
		  this.midpt_lat = lat;		  
	  }
	  public void setMidpointLon(double lon) {
		  this.midpt_lon = lon;		  
	  }

	  /*  public void updateMidPoint(double lat1, double lon1, double lat2, double lon2) {

		 	double dLon = Math.toRadians(lon2 - lon1);

		 	// convert to radians
		 	lat1 = Math.toRadians(lat1);
		 	lat2 = Math.toRadians(lat2);
		 	lon1 = Math.toRadians(lon1);

		 	double Bx = Math.cos(lat2) * Math.cos(dLon);
		 	double By = Math.cos(lat2) * Math.sin(dLon);
		 	double tmpLat = Math.atan2(
		 			Math.sin(lat1) + Math.sin(lat2),
		 			Math.sqrt((Math.cos(lat1) + Bx) * (Math.cos(lat1) + Bx) + By
		 					* By));
		 	double tmpLon = lon1 + Math.atan2(By, Math.cos(lat1) + Bx);
		 	this.midpt_lat = Math.toDegrees(tmpLat);
		 	this.midpt_lon = Math.toDegrees(tmpLon);		 	
		 	// print out in degrees
		 	//System.out.println(midpt_lat + " " + midpt_lon);
		 }	*/
	}

/*public class MyCalculations {
  private double midpoint_latitude;	//Shruthi
  private double midpoint_longitude;	//Shruthi

//	  public void MyCalculations() {
//		  midpoint_latitude = 0;
//		  midpoint_longitude = 0;
//	  }  
	  public double getMidptLatitude() {
		  return midpoint_latitude;
	  }
	  public double getMidptLongitude() {
		  return midpoint_longitude;
	  }
	  public void setMidpt(double lat, double lon) {
		  this.midpoint_latitude = lat;
		  this.midpoint_longitude = lon;
	  }	
	 
  public void updateMidPoint(double lat1, double lon1, double lat2, double lon2) {

 	double dLon = Math.toRadians(lon2 - lon1);

 	// convert to radians
 	lat1 = Math.toRadians(lat1);
 	lat2 = Math.toRadians(lat2);
 	lon1 = Math.toRadians(lon1);

 	double Bx = Math.cos(lat2) * Math.cos(dLon);
 	double By = Math.cos(lat2) * Math.sin(dLon);
 	double midpt_lat = Math.atan2(
 			Math.sin(lat1) + Math.sin(lat2),
 			Math.sqrt((Math.cos(lat1) + Bx) * (Math.cos(lat1) + Bx) + By
 					* By));
 	double midpt_lon = lon1 + Math.atan2(By, Math.cos(lat1) + Bx);
 	this.midpoint_latitude = Math.toDegrees(midpt_lat);
 	this.midpoint_longitude = Math.toDegrees(midpt_lon);
 	// print out in degrees
 	//System.out.println(midpt_lat + " " + midpt_lon);
 }	
}*/
