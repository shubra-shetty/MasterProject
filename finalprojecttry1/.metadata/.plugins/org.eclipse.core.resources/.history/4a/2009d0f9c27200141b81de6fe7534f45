package com.example.finalproject_try1;

import android.app.Activity;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.os.AsyncTask;
import android.widget.TextView;

import java.io.IOException;
import java.util.List;

import com.google.api.client.extensions.android.http.AndroidHttp;
import com.google.api.client.http.HttpRequest;
import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.json.jackson2.JacksonFactory;
//import com.example.finalproject_try1.RegisterActivity.QueryMessagesTask;
import com.example.finalproject_try1.messageEndpoint.MessageEndpoint;
import com.example.finalproject_try1.messageEndpoint.model.MessageData;
//import com.example.finalproject_try1.messageEndpoint.model.CollectionResponseMessageData;
import com.example.finalproject_try1.mycalculationsendpoint.Mycalculationsendpoint;
import com.example.finalproject_try1.mycalculationsendpoint.model.MyCalculations;
import com.example.finalproject_try1.mycalculationsendpoint.model.CollectionResponseMyCalculations;

import android.widget.Button;
import android.widget.ListView;

import java.util.ArrayList;
import java.util.HashMap;

import android.app.ProgressDialog;
import android.util.Log;
import android.content.Intent;
import android.text.Html;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListAdapter;
import android.widget.SimpleAdapter;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;

public class MainActivity extends Activity {
//	  private TextView resultsList;
	  private Mycalculationsendpoint endpoint = null;
	  private MessageEndpoint messageEndpoint = null;
	  
		// flag for Internet connection status
		Boolean isInternetPresent = false;

		// Connection detector class
		ConnectionDetector cd;
		
		// Alert Dialog Manager
		AlertDialogManager alert = new AlertDialogManager();

		// Google Places
		public GooglePlaces googlePlaces;

		// Places List
		public PlacesList nearPlaces;

		// GPS Location
		public GPSTracker gps;

		// Button
		public Button btnShowOnMap;

		// Progress dialog
		public ProgressDialog pDialog;
		
		// Places Listview
		public ListView lv;
		
		// ListItems data
		public ArrayList<HashMap<String, String>> placesListItems = new ArrayList<HashMap<String,String>>();
		
		
		// KEY Strings
		public static String KEY_REFERENCE = "reference"; // id of the place
		public static String KEY_NAME = "name"; // name of the place
		public static String KEY_VICINITY = "vicinity"; // Place area name
		public double midpt_lat ;//= 37.4075209;
		public double midpt_lon ;//= -121.9376168;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
     	System.out.println("Meet-n-Eat:  Calling Async Task" ); 
 
    //---- Meet-n-Eat client code below -------
     	cd = new ConnectionDetector(getApplicationContext());

		// Check if Internet present
		isInternetPresent = cd.isConnectingToInternet();
		if (!isInternetPresent) {
			// Internet Connection is not present
			alert.showAlertDialog(MainActivity.this, "Internet Connection Error",
					"Please connect to working Internet connection", false);
			// stop executing code by return
			return;
		}

		// creating GPS Class object
		gps = new GPSTracker(this);

		// check if GPS location can get
		if (gps.canGetLocation()) {
			Log.d("Your Location", "latitude:" + gps.getLatitude() + ", longitude: " + gps.getLongitude());
		} else {
			// Can't get user's current location
			alert.showAlertDialog(MainActivity.this, "GPS Status",
					"Couldn't get location information. Please enable GPS",
					false);
			// stop executing code by return
			return;
		}
		//---- Meet-n-Eat client code above -------  
		
		//---- Communication with Server below -------
     	  MessageEndpoint.Builder endpointBuilder = new MessageEndpoint.Builder(
     		        AndroidHttp.newCompatibleTransport(),
     		        new JacksonFactory(),
     		        new HttpRequestInitializer() {
     		          public void initialize(HttpRequest httpRequest) { }
     		        });

     		    messageEndpoint = CloudEndpointUtils.updateBuilder(endpointBuilder).build();
     	new MessageEndpointTask(this, messageEndpoint).execute();   
     		    
    	Mycalculationsendpoint.Builder builder = new Mycalculationsendpoint.Builder(
                AndroidHttp.newCompatibleTransport(), new JacksonFactory(), 	
            new HttpRequestInitializer() {
                public void initialize(HttpRequest httpRequest) { }
              });

            endpoint = CloudEndpointUtils.updateBuilder(builder).build();
  //Insert the GPS location into Google datastore on the cloud
       new MyCalculationsTask(this, endpoint).execute();	

 //       resultsList = (TextView) findViewById(R.id.results);
  //Retrieve the MidPoint of location from Google datastore on the cloud          
        new ListOfPlacesAsyncRetriever(this, endpoint).execute();
		//---- Communication with Server above -------
        System.out.println("Meet-n-Eat: Received Midpoint from Server, back to MainActivity.");
		lv = (ListView) findViewById(R.id.list);
		
		// button show on map
		btnShowOnMap = (Button) findViewById(R.id.btn_show_map);

		// calling background Async task to load Google Places
		// After getting places from Google all the data is shown in listview
		new LoadPlaces().execute();

	     System.out.println("Meet-n-Eat: LoadPlaces() DONE.");
		/** Button click event for shown on map */
		btnShowOnMap.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View arg0) {
				Intent i = new Intent(getApplicationContext(),
						PlacesMapActivity.class);
				// Sending user current geo location

				     
			//	i.putExtra("user_latitude", Double.toString(gps.getLatitude()));
			//	i.putExtra("user_longitude", Double.toString(gps.getLongitude()));
			 	i.putExtra("user_latitude", Double.toString(midpt_lat));
				i.putExtra("user_longitude", Double.toString(midpt_lon));
				
				// passing near places to map activity
				i.putExtra("near_places", nearPlaces);
				// staring activity
				startActivity(i);
			}
		});
    //    resultsList.setText(placesFound.toString());
		/**
		 * ListItem click event
		 * On selecting a listitem SinglePlaceActivity is launched
		 * */
		lv.setOnItemClickListener(new OnItemClickListener() {
 
            @Override
            public void onItemClick(AdapterView<?> parent, View view,
                    int position, long id) {
            	// getting values from selected ListItem
                String reference = ((TextView) view.findViewById(R.id.reference)).getText().toString();
                
                // Starting new intent
                Intent in = new Intent(getApplicationContext(),
                        SinglePlaceActivity.class);
                
                // Sending place refrence id to single place activity
                // place refrence id used to get "Place full details"
                in.putExtra(KEY_REFERENCE, reference);
                startActivity(in);
            }
        });
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

  /*  @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }	*/
    
    /*
     * Need to run this in background so we don't hold up the UI thread, 
     * this task will ask the App Engine backend for the last 5 messages
     * sent to it
     */
    private class MessageEndpointTask 
        extends AsyncTask<Void, Void, Void> {
      Exception exceptionThrown = null;
      MessageEndpoint msgEndpoint;

      public MessageEndpointTask(Activity activity, MessageEndpoint messageEndpoint) {
        this.msgEndpoint = messageEndpoint;
      }
      
      @Override
      protected Void doInBackground(Void... params) {
        
        	
        MessageData message = new MessageData();
        message.setMessage("Hello from Shruthi");
     	System.out.println("Meet-n-Eat:  " + message.getMessage());
     	try {
     	System.out.println("Meet-n-Eat: SendMessage() CALL.");
     	msgEndpoint.sendMessage(message.getMessage());	// insertMyCalculations(myCalc).execute(); 
     	//        CollectionResponseMessageData messages =               messageEndpoint.listMessages().setLimit(5).execute();
        //  return null;	//messages;
        } catch (IOException e) {
          exceptionThrown = e;
          System.out.println("Meet-n-Eat: IO Exception.");
        //  return null;
          //Handle exception in PostExecute
        }
     	System.out.println("Meet-n-Eat: SendMessage() DONE.");
     	 return null;
      }
    }
    /**
     * AsyncTask for calling MyCalculations API to calculate the midPoint (e.g., a store).
     */
    private class MyCalculationsTask extends AsyncTask<Void, Void, Void> {
    	Mycalculationsendpoint myCalcendpoint;

    	    public MyCalculationsTask(Activity activity, Mycalculationsendpoint endpoint) {
    	      this.myCalcendpoint = endpoint;
    	    }
      /**
       * Calls appropriate CloudEndpoint to indicate that user checked into a place.
       *
       * @param params the place where the user is checking in.
       */
      @Override
      protected Void doInBackground(Void... params) {
        MyCalculations myCalc = new MyCalculations();

        // Set the ID of the store where the user is.
        
        myCalc.setMidpointLat(gps.getLatitude());
        myCalc.setMidpointLon(gps.getLongitude());
        myCalc.setAddress("buckley st santa clara CA");
        myCalc.setPlaceId("Shubra");
        
		Key k = KeyFactory.stringToKey(myCalc.getPlaceId());			
		System.out.println("Meet-n-Eat: Generated key for string : " + KeyFactory.keyToString(k));
		myCalc.setKey(k);
        
    	System.out.println("Meet-n-Eat:  " + myCalc.getMidpointLat());
    	System.out.println("Meet-n-Eat:  " + myCalc.getMidpointLon()); 
    	System.out.println("Meet-n-Eat:  " + myCalc.getAddress());
   	   CollectionResponseMyCalculations result;
  	
  /*    try {
    	   System.out.println("Meet-n-Eat: Start deleting entries in datastore.");
           result = myCalcendpoint.listMyCalculations().execute();
           List<MyCalculations> places = result.getItems();
           int i = 0;
           if(places.size() >= 1) {
        	   for (MyCalculations place : places){
        		   myCalcendpoint.removeMyCalculations(place.getKey().getId());
        		  	i++;           
        	   }
            	System.out.println("Meet-n-Eat: Number of entries deleted from datastore = " + i);
           }
       } catch (IOException e) {
           // TODO Auto-generated catch block
         	  System.out.println("Meet-n-Eat: IO Exception.");
           e.printStackTrace();
           result = null;
         }	*/
       
   try {        
  //  	   myCalcendpoint.removeMyCalculations(id);
        	 System.out.println("Meet-n-Eat: inserMyCalculations() CALL.");        	 
          myCalcendpoint.insertMyCalculations(myCalc).execute();
        } catch (IOException e) {
          // TODO Auto-generated catch block
        	  System.out.println("Meet-n-Eat: IO Exception.");
          e.printStackTrace();
        }
        System.out.println("Meet-n-Eat: inserMyCalculations() DONE.");
        return null;
      }
    }
    
    /**
     * AsyncTask for retrieving the list of places (e.g., stores) and updating the
     * corresponding results list.
     */
    private class ListOfPlacesAsyncRetriever extends AsyncTask<Void, Void, CollectionResponseMyCalculations> {
     	Mycalculationsendpoint myCalcendpoint;

	    public ListOfPlacesAsyncRetriever(Activity activity, Mycalculationsendpoint endpoint) {
	      this.myCalcendpoint = endpoint;
	    }
      @Override
      protected CollectionResponseMyCalculations doInBackground(Void... params) {


      CollectionResponseMyCalculations result;

       try {      
    //    	result = endpoint.listMyCalculations().execute();
      	  System.out.println("Meet-n-Eat: listMyCalculation() CALL.");
          result = myCalcendpoint.listMyCalculations().execute();
          
        } catch (IOException e) {
          // TODO Auto-generated catch block
        	  System.out.println("Meet-n-Eat: IO Exception.");
          e.printStackTrace();
          result = null;
        }
       System.out.println("Meet-n-Eat: listMyCalculation() DONE.");
        return result;
      }

      @Override
  //    @SuppressWarnings("null")
      protected void onPostExecute(CollectionResponseMyCalculations result) {
        
    	
        if (result == null || result.getItems() == null || result.getItems().size() < 1) {
          if (result == null) {
        	  System.out.println("Meet-n-Eat: Retrieving places failed.");
      //      resultsList.setText("Retrieving places failed.");
          } else {
        	  System.out.println("Meet-n-Eat: No places found.");
      //      resultsList.setText("No places found.");
          }

          return;
        }
        System.out.println("Meet-n-Eat: Retrieving places successful.");
        List<MyCalculations> places = result.getItems();
        StringBuffer placesFound = new StringBuffer();
        int i = 0;
        for (MyCalculations place : places){
        	System.out.println("Meet-n-Eat:  " + place.getMidpointLat());
        	System.out.println("Meet-n-Eat:  " + place.getMidpointLon());
        	midpt_lat = place.getMidpointLat();
        	midpt_lon = place.getMidpointLon();
         	i++;
         	
  /* 		   try {
   			   System.out.println("Meet-n-Eat: Deleting entry " + i); 
   			   place = myCalcendpoint.updateMyCalculations(place).execute(); //Try Deletion
   		//	   myCalcendpoint.removeMyCalculations(null).execute();	//(place.getKey().getId());
   		//	   myCalcendpoint.
   		   } catch (IOException e) {            
          	  System.out.println("Meet-n-Eat: IO Exception.");
          	  e.printStackTrace();          	  
   		   }	*/	
     //     placesFound.append(Double.toString(place.getMidpointLat()) + " " + Double.toString(place.getMidpointLon()) + "\r\n");
        }	
        System.out.println("Meet-n-Eat: Number of entries from datastore = " + i);   
        System.out.println("Meet-n-Eat: ListOfPlacesAsyncRetriever::onPostExecute() DONE.");
      }
    }
    
	/**
	 * Background Async Task to Load Google places
	 * */
	class LoadPlaces extends AsyncTask<String, String, String> {

		/**
		 * Before starting background thread Show Progress Dialog
		 * */
		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			pDialog = new ProgressDialog(MainActivity.this);
			pDialog.setMessage(Html.fromHtml("<b>Search</b><br/>Loading Places..."));
			pDialog.setIndeterminate(false);
			pDialog.setCancelable(false);
			pDialog.show();
		}

		/**
		 * getting Places JSON
		 * */
		protected String doInBackground(String... args) {
			// creating Places class object
			googlePlaces = new GooglePlaces();
			
			try {
				// Separeate your place types by PIPE symbol "|"
				// If you want all types places make it as null
				// Check list of types supported by google
				// 
				String types = "cafe|restaurant"; // Listing places only cafes, restaurants
				
				// Radius in meters - increase this value if you don't find any places
				double radius = 1000; // 1000 meters 
				
				// get nearest places
	//			nearPlaces = googlePlaces.search(gps.getLatitude(),
	//					gps.getLongitude(), radius, types);
				System.out.println("Meet-n-Eat: LoadPlaces::googlesearch() CALL.");
				nearPlaces = googlePlaces.search(midpt_lat, midpt_lon, radius, types);

			} catch (Exception e) {
				e.printStackTrace();
			}
			System.out.println("Meet-n-Eat: LoadPlaces::googlesearch() DONE.");
			return null;
		}

		/**
		 * After completing background task Dismiss the progress dialog
		 * and show the data in UI
		 * Always use runOnUiThread(new Runnable()) to update UI from background
		 * thread, otherwise you will get error
		 * **/
		protected void onPostExecute(String file_url) {
			// dismiss the dialog after getting all products
			pDialog.dismiss();
			// updating UI from Background Thread
			runOnUiThread(new Runnable() {
				public void run() {
					/**
					 * Updating parsed Places into LISTVIEW
					 * */
					// Get json response status
					String status = nearPlaces.status;
					
					// Check for all possible status
					if(status.equals("OK")){
						// Successfully got places details
						if (nearPlaces.results != null) {
							// loop through each place
							for (Place p : nearPlaces.results) {
								HashMap<String, String> map = new HashMap<String, String>();
								
								// Place reference won't display in listview - it will be hidden
								// Place reference is used to get "place full details"
								map.put(KEY_REFERENCE, p.reference);
								
								// Place name
								map.put(KEY_NAME, p.name);
								
								
								// adding HashMap to ArrayList
								placesListItems.add(map);
							}
							// list adapter
							ListAdapter adapter = new SimpleAdapter(MainActivity.this, placesListItems,
					                R.layout.list_item,
					                new String[] { KEY_REFERENCE, KEY_NAME}, new int[] {
					                        R.id.reference, R.id.name });
							
							// Adding data into listview
							lv.setAdapter(adapter);
						}
					}
					else if(status.equals("ZERO_RESULTS")){
						// Zero results found
						alert.showAlertDialog(MainActivity.this, "Near Places",
								"Sorry no places found. Try to change the types of places",
								false);
					}
					else if(status.equals("UNKNOWN_ERROR"))
					{
						alert.showAlertDialog(MainActivity.this, "Places Error",
								"Sorry unknown error occured.",
								false);
					}
					else if(status.equals("OVER_QUERY_LIMIT"))
					{
						alert.showAlertDialog(MainActivity.this, "Places Error",
								"Sorry query limit to google places is reached",
								false);
					}
					else if(status.equals("REQUEST_DENIED"))
					{
						alert.showAlertDialog(MainActivity.this, "Places Error",
								"Sorry error occured. Request is denied",
								false);
					}
					else if(status.equals("INVALID_REQUEST"))
					{
						alert.showAlertDialog(MainActivity.this, "Places Error",
								"Sorry error occured. Invalid Request",
								false);
					}
					else
					{
						alert.showAlertDialog(MainActivity.this, "Places Error",
								"Sorry error occured.",
								false);
					}
				}
			});

		}

	}
}
